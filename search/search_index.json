{
    "docs": [
        {
            "location": "/installation/",
            "text": "Installation\n\ue157\n\n\nPackage Control\n\ue157\n\n\nThe recommended way to install TabsExtra is via \nPackage Control\n.  Package Control will install the correct branch on your system and keep it up to date.\n\n\n\n\n\n\nEnsure Package Control is installed.  Instructions are found \nhere\n.\n\n\n\n\n\n\nIn Sublime Text, press \nCtrl\n\uff0b\nShift\n\uff0b\nP\n (Win, Linux) or \nCmd\n\uff0b\nShift\n\uff0b\nP\n(macOS) to bring up the quick panel and start typing \nPackage Control: Install Package\n.  Select the command and it will show a list of installable plugins.\n\n\n\n\n\n\nStart typing \nTabsExtra\n; when you see it, select it.\n\n\n\n\n\n\nRestart to be sure everything is loaded proper.\n\n\n\n\n\n\nEnjoy!\n\n\n\n\n\n\nManual Installation\n\ue157\n\n\n\n\nWarning\n\n\nThis is not the recommended way to install TabsExtra for the average user.  Installing this way \nwill not\n get automatically updated.\n\n\nIf you are forking for a pull request, you should \njust\n clone TabsExtra and run Package Control's \nSatisfy Dependency\n command to get all the dependencies.\n\n\n\n\nFor those who want to install TabsExtra without package control, here are the steps.  It understood that some people for what ever reason will prefer manually and may even have legitimate reasons to do so.  When going this route, you will have to keep all the packages updated yourself.\n\n\n\n\n\n\n\n\nDownload the latest releases of the following dependencies and unpack or git clone in the \nPackages\n folder as shown below:\n\n\n\n\nhttps://bitbucket.org/teddy_beer_maniac/sublime-text-dependency-markupsafe\n -> \nmarkupsafe\n\n\nhttps://bitbucket.org/teddy_beer_maniac/sublime-text-dependency-jinja2\n -> \npython-jinja2\n\n\nhttps://github.com/packagecontrol/pygments\n -> \npygments\n\n\nhttps://github.com/facelessuser/sublime-markdown-popups\n -> \nmdpopups\n\n\nhttps://github.com/facelessuser/sublime-markdown\n -> \npython-markdown\n\n\n\n\n\n\n\n\nDownload and unpack or git clone the latest TabsExtra release and unpack as \nTabsExtra\n:\n\n\n\n\nhttps://github.com/facelessuser/TabsExtra\n -> TabsExtra\n\n\n\n\n\n\n\n\nCreate a folder under \nPackages\n called \n00-dependencies\n and under that folder create a file called \n00-dependencies.py\n:\n\n\nCopy the following code to \n00-dependencies.py\n (this code was taken from Package Control):\n\n\nimport\n \nsys\n\n\nimport\n \nos\n\n\nfrom\n \nos.path\n \nimport\n \ndirname\n\n\n\nif\n \nos\n.\nname\n \n==\n \n'nt'\n:\n\n    \nfrom\n \nctypes\n \nimport\n \nwindll\n,\n \ncreate_unicode_buffer\n\n\n\nimport\n \nsublime\n\n\n\n\nif\n \nsys\n.\nversion_info\n \n>=\n \n(\n3\n,):\n\n    \ndef\n \ndecode\n(\npath\n):\n\n        \nreturn\n \npath\n\n\n    \ndef\n \nencode\n(\npath\n):\n\n        \nreturn\n \npath\n\n\n    \nif\n \nos\n.\npath\n.\nbasename\n(\n__file__\n)\n \n==\n \n'sys_path.py'\n:\n\n        \npc_package_path\n \n=\n \ndirname\n(\ndirname\n(\n__file__\n))\n\n    \n# When loaded as a .sublime-package file, the filename ends up being\n\n    \n# Package Control.sublime-package/Package Control.package_control.sys_path\n\n    \nelse\n:\n\n        \npc_package_path\n \n=\n \ndirname\n(\n__file__\n)\n\n    \nst_version\n \n=\n \nu\n'3'\n\n\n\nelse\n:\n\n    \ndef\n \ndecode\n(\npath\n):\n\n        \nif\n \nnot\n \nisinstance\n(\npath\n,\n \nunicode\n):\n\n            \npath\n \n=\n \npath\n.\ndecode\n(\nsys\n.\ngetfilesystemencoding\n())\n\n        \nreturn\n \npath\n\n\n    \ndef\n \nencode\n(\npath\n):\n\n        \nif\n \nisinstance\n(\npath\n,\n \nunicode\n):\n\n            \npath\n \n=\n \npath\n.\nencode\n(\nsys\n.\ngetfilesystemencoding\n())\n\n        \nreturn\n \npath\n\n\n    \npc_package_path\n \n=\n \ndecode\n(\nos\n.\ngetcwd\n())\n\n    \nst_version\n \n=\n \nu\n'2'\n\n\n\n\nst_dir\n \n=\n \ndirname\n(\ndirname\n(\npc_package_path\n))\n\n\n\n\ndef\n \nadd\n(\npath\n,\n \nfirst\n=\nFalse\n):\n\n    \n\"\"\"\n\n\n    Adds an entry to the beginning of sys.path, working around the fact that\n\n\n    Python 2.6 can't import from non-ASCII paths on Windows.\n\n\n\n    :param path:\n\n\n        A unicode string of a folder, zip file or sublime-package file to\n\n\n        add to the path\n\n\n\n    :param first:\n\n\n        If the path should be added at the beginning\n\n\n    \"\"\"\n\n\n    \nif\n \nos\n.\nname\n \n==\n \n'nt'\n:\n\n        \n# Work around unicode path import issue on Windows with Python 2.6\n\n        \nbuf\n \n=\n \ncreate_unicode_buffer\n(\n512\n)\n\n        \nif\n \nwindll\n.\nkernel32\n.\nGetShortPathNameW\n(\npath\n,\n \nbuf\n,\n \nlen\n(\nbuf\n)):\n\n            \npath\n \n=\n \nbuf\n.\nvalue\n\n\n    \nenc_path\n \n=\n \nencode\n(\npath\n)\n\n\n    \nif\n \nos\n.\npath\n.\nexists\n(\nenc_path\n):\n\n        \nif\n \nfirst\n:\n\n            \ntry\n:\n\n                \nsys\n.\npath\n.\nremove\n(\nenc_path\n)\n\n            \nexcept\n \n(\nValueError\n):\n\n                \npass\n\n            \nsys\n.\npath\n.\ninsert\n(\n0\n,\n \nenc_path\n)\n\n        \nelif\n \nenc_path\n \nnot\n \nin\n \nsys\n.\npath\n:\n\n            \nsys\n.\npath\n.\nappend\n(\nenc_path\n)\n\n\n\n\ndef\n \nremove\n(\npath\n):\n\n    \n\"\"\"\n\n\n    Removes a path from sys.path if it is present\n\n\n\n    :param path:\n\n\n        A unicode string of a folder, zip file or sublime-package file\n\n\n    \"\"\"\n\n\n    \ntry\n:\n\n        \nsys\n.\npath\n.\nremove\n(\nencode\n(\npath\n))\n\n    \nexcept\n \n(\nValueError\n):\n\n        \npass\n\n\n    \nif\n \nos\n.\nname\n \n==\n \n'nt'\n:\n\n        \nbuf\n \n=\n \ncreate_unicode_buffer\n(\n512\n)\n\n        \nif\n \nwindll\n.\nkernel32\n.\nGetShortPathNameW\n(\npath\n,\n \nbuf\n,\n \nlen\n(\nbuf\n)):\n\n            \npath\n \n=\n \nbuf\n.\nvalue\n\n        \ntry\n:\n\n            \nsys\n.\npath\n.\nremove\n(\nencode\n(\npath\n))\n\n        \nexcept\n \n(\nValueError\n):\n\n            \npass\n\n\n\n\ndef\n \ngenerate_dependency_paths\n(\nname\n):\n\n    \n\"\"\"\n\n\n    Accepts a dependency name and generates a dict containing the three standard\n\n\n    import paths that are valid for the current machine.\n\n\n\n    :param name:\n\n\n        A unicode string name of the dependency\n\n\n\n    :return:\n\n\n        A dict with the following keys:\n\n\n         - 'ver'\n\n\n         - 'plat'\n\n\n         - 'arch'\n\n\n    \"\"\"\n\n\n    \npackages_dir\n \n=\n \nos\n.\npath\n.\njoin\n(\nst_dir\n,\n \nu\n'Packages'\n)\n\n    \ndependency_dir\n \n=\n \nos\n.\npath\n.\njoin\n(\npackages_dir\n,\n \nname\n)\n\n\n    \nver\n \n=\n \nu\n'st\n%s\n'\n \n%\n \nst_version\n\n    \nplat\n \n=\n \nsublime\n.\nplatform\n()\n\n    \narch\n \n=\n \nsublime\n.\narch\n()\n\n\n    \nreturn\n \n{\n\n        \n'all'\n:\n \nos\n.\npath\n.\njoin\n(\ndependency_dir\n,\n \n'all'\n),\n\n        \n'ver'\n:\n \nos\n.\npath\n.\njoin\n(\ndependency_dir\n,\n \nver\n),\n\n        \n'plat'\n:\n \nos\n.\npath\n.\njoin\n(\ndependency_dir\n,\n \nu\n'\n%s\n_\n%s\n'\n \n%\n \n(\nver\n,\n \nplat\n)),\n\n        \n'arch'\n:\n \nos\n.\npath\n.\njoin\n(\ndependency_dir\n,\n \nu\n'\n%s\n_\n%s\n_\n%s\n'\n \n%\n \n(\nver\n,\n \nplat\n,\n \narch\n))\n\n    \n}\n\n\n\n\ndef\n \nadd_dependency\n(\nname\n,\n \nfirst\n=\nFalse\n):\n\n    \n\"\"\"\n\n\n    Accepts a dependency name and automatically adds the appropriate path\n\n\n    to sys.path, if the dependency has a path for the current platform and\n\n\n    architecture.\n\n\n\n    :param name:\n\n\n        A unicode string name of the dependency\n\n\n\n    :param first:\n\n\n        If the path should be added to the beginning of the list\n\n\n    \"\"\"\n\n\n    \ndep_paths\n \n=\n \ngenerate_dependency_paths\n(\nname\n)\n\n\n    \nfor\n \npath\n \nin\n \ndep_paths\n.\nvalues\n():\n\n        \nif\n \nos\n.\npath\n.\nexists\n(\nencode\n(\npath\n)):\n\n            \nadd\n(\npath\n,\n \nfirst\n=\nfirst\n)\n\n\n\n\nadd_dependency\n(\n'pygments'\n)\n\n\nadd_dependency\n(\n'markupsafe'\n)\n\n\nadd_dependency\n(\n'python-markdown'\n)\n\n\nadd_dependency\n(\n'python-jinja2'\n)\n\n\nadd_dependency\n(\n'mdpopups'\n)\n\n\n\n\n\n\n\n\n\nRestart and enjoy.\n\n\n\n\n\n\nGit Cloning\n\ue157\n\n\n\n\n\n\nQuit Sublime Text.\n\n\n\n\n\n\nOpen a terminal and enter the following.  For dependencies replace the URL with the appropriate URL, and the appropriate folder to check it out to:\n\n\ncd /path/to/Sublime Text 3/Packages\ngit clone https://github.com/facelessuser/TabsExtra.git TabsExtra\n\n\n\n\n\n\n\n\nRestart Sublime Text.",
            "title": "Installation"
        },
        {
            "location": "/installation/#installation",
            "text": "",
            "title": "Installation"
        },
        {
            "location": "/installation/#package-control",
            "text": "The recommended way to install TabsExtra is via  Package Control .  Package Control will install the correct branch on your system and keep it up to date.    Ensure Package Control is installed.  Instructions are found  here .    In Sublime Text, press  Ctrl \uff0b Shift \uff0b P  (Win, Linux) or  Cmd \uff0b Shift \uff0b P (macOS) to bring up the quick panel and start typing  Package Control: Install Package .  Select the command and it will show a list of installable plugins.    Start typing  TabsExtra ; when you see it, select it.    Restart to be sure everything is loaded proper.    Enjoy!",
            "title": "Package Control"
        },
        {
            "location": "/installation/#manual-installation",
            "text": "Warning  This is not the recommended way to install TabsExtra for the average user.  Installing this way  will not  get automatically updated.  If you are forking for a pull request, you should  just  clone TabsExtra and run Package Control's  Satisfy Dependency  command to get all the dependencies.   For those who want to install TabsExtra without package control, here are the steps.  It understood that some people for what ever reason will prefer manually and may even have legitimate reasons to do so.  When going this route, you will have to keep all the packages updated yourself.     Download the latest releases of the following dependencies and unpack or git clone in the  Packages  folder as shown below:   https://bitbucket.org/teddy_beer_maniac/sublime-text-dependency-markupsafe  ->  markupsafe  https://bitbucket.org/teddy_beer_maniac/sublime-text-dependency-jinja2  ->  python-jinja2  https://github.com/packagecontrol/pygments  ->  pygments  https://github.com/facelessuser/sublime-markdown-popups  ->  mdpopups  https://github.com/facelessuser/sublime-markdown  ->  python-markdown     Download and unpack or git clone the latest TabsExtra release and unpack as  TabsExtra :   https://github.com/facelessuser/TabsExtra  -> TabsExtra     Create a folder under  Packages  called  00-dependencies  and under that folder create a file called  00-dependencies.py :  Copy the following code to  00-dependencies.py  (this code was taken from Package Control):  import   sys  import   os  from   os.path   import   dirname  if   os . name   ==   'nt' : \n     from   ctypes   import   windll ,   create_unicode_buffer  import   sublime  if   sys . version_info   >=   ( 3 ,): \n     def   decode ( path ): \n         return   path \n\n     def   encode ( path ): \n         return   path \n\n     if   os . path . basename ( __file__ )   ==   'sys_path.py' : \n         pc_package_path   =   dirname ( dirname ( __file__ )) \n     # When loaded as a .sublime-package file, the filename ends up being \n     # Package Control.sublime-package/Package Control.package_control.sys_path \n     else : \n         pc_package_path   =   dirname ( __file__ ) \n     st_version   =   u '3'  else : \n     def   decode ( path ): \n         if   not   isinstance ( path ,   unicode ): \n             path   =   path . decode ( sys . getfilesystemencoding ()) \n         return   path \n\n     def   encode ( path ): \n         if   isinstance ( path ,   unicode ): \n             path   =   path . encode ( sys . getfilesystemencoding ()) \n         return   path \n\n     pc_package_path   =   decode ( os . getcwd ()) \n     st_version   =   u '2'  st_dir   =   dirname ( dirname ( pc_package_path ))  def   add ( path ,   first = False ): \n     \"\"\"      Adds an entry to the beginning of sys.path, working around the fact that      Python 2.6 can't import from non-ASCII paths on Windows.      :param path:          A unicode string of a folder, zip file or sublime-package file to          add to the path      :param first:          If the path should be added at the beginning      \"\"\" \n\n     if   os . name   ==   'nt' : \n         # Work around unicode path import issue on Windows with Python 2.6 \n         buf   =   create_unicode_buffer ( 512 ) \n         if   windll . kernel32 . GetShortPathNameW ( path ,   buf ,   len ( buf )): \n             path   =   buf . value \n\n     enc_path   =   encode ( path ) \n\n     if   os . path . exists ( enc_path ): \n         if   first : \n             try : \n                 sys . path . remove ( enc_path ) \n             except   ( ValueError ): \n                 pass \n             sys . path . insert ( 0 ,   enc_path ) \n         elif   enc_path   not   in   sys . path : \n             sys . path . append ( enc_path )  def   remove ( path ): \n     \"\"\"      Removes a path from sys.path if it is present      :param path:          A unicode string of a folder, zip file or sublime-package file      \"\"\" \n\n     try : \n         sys . path . remove ( encode ( path )) \n     except   ( ValueError ): \n         pass \n\n     if   os . name   ==   'nt' : \n         buf   =   create_unicode_buffer ( 512 ) \n         if   windll . kernel32 . GetShortPathNameW ( path ,   buf ,   len ( buf )): \n             path   =   buf . value \n         try : \n             sys . path . remove ( encode ( path )) \n         except   ( ValueError ): \n             pass  def   generate_dependency_paths ( name ): \n     \"\"\"      Accepts a dependency name and generates a dict containing the three standard      import paths that are valid for the current machine.      :param name:          A unicode string name of the dependency      :return:          A dict with the following keys:           - 'ver'           - 'plat'           - 'arch'      \"\"\" \n\n     packages_dir   =   os . path . join ( st_dir ,   u 'Packages' ) \n     dependency_dir   =   os . path . join ( packages_dir ,   name ) \n\n     ver   =   u 'st %s '   %   st_version \n     plat   =   sublime . platform () \n     arch   =   sublime . arch () \n\n     return   { \n         'all' :   os . path . join ( dependency_dir ,   'all' ), \n         'ver' :   os . path . join ( dependency_dir ,   ver ), \n         'plat' :   os . path . join ( dependency_dir ,   u ' %s _ %s '   %   ( ver ,   plat )), \n         'arch' :   os . path . join ( dependency_dir ,   u ' %s _ %s _ %s '   %   ( ver ,   plat ,   arch )) \n     }  def   add_dependency ( name ,   first = False ): \n     \"\"\"      Accepts a dependency name and automatically adds the appropriate path      to sys.path, if the dependency has a path for the current platform and      architecture.      :param name:          A unicode string name of the dependency      :param first:          If the path should be added to the beginning of the list      \"\"\" \n\n     dep_paths   =   generate_dependency_paths ( name ) \n\n     for   path   in   dep_paths . values (): \n         if   os . path . exists ( encode ( path )): \n             add ( path ,   first = first )  add_dependency ( 'pygments' )  add_dependency ( 'markupsafe' )  add_dependency ( 'python-markdown' )  add_dependency ( 'python-jinja2' )  add_dependency ( 'mdpopups' )     Restart and enjoy.",
            "title": "Manual Installation"
        },
        {
            "location": "/installation/#git-cloning",
            "text": "Quit Sublime Text.    Open a terminal and enter the following.  For dependencies replace the URL with the appropriate URL, and the appropriate folder to check it out to:  cd /path/to/Sublime Text 3/Packages\ngit clone https://github.com/facelessuser/TabsExtra.git TabsExtra    Restart Sublime Text.",
            "title": "Git Cloning"
        },
        {
            "location": "/",
            "text": "User Guide\n\ue157\n\n\nOverview\n\ue157\n\n\nSublime Plugin with sticky tabs, more tab closing options, tab sorting, and tab access to cloning, deleting, renaming etc.\n\n\n\n\n\n\nAdds \nClose Tabs to the Left\n for the current group.\n\n\nAdds \nClose All Tabs\n for the current group.\n\n\nAdds \nSticky Tabs\n that allows a user to select certain tabs that will not close when a tab close command is issued.\n\n\nAdds variants of the close commands to skip unsaved files, or to dismiss saved files with no prompt.\n\n\nOverrides the built-in tab commands and 'close' and 'close_all' commands to work with sticky tabs.\n\n\nKeep active window focus on delete, or default to the last active, left, or right tab (user configurable).\n\n\nAdd open last tab, reveal in sidebar or finder, copy file path, save options, and revert.\n\n\nAdds tab sorting options (based loosely on @bizoo's \nSortTabs\n plugin).\n\n\nAccess clone, delete, rename, move, save, reveal, copy file path, revert, etc.\n\n\n\n\nGeneral Usage\n\ue157\n\n\nUsing TabsExtra is very straight forward once the menu is created.  TabsExtra will update the right click context menu of tabs with various useful features.  It also overrides a couple of Sublime's commands to allow for various improvements in relation to tab closing, tab focus when closing files, and tab position when opening files.\n\n\nInstall/Upgrade Menu\n\ue157\n\n\nWhen first installing TabsExtra, you need to Install the new menu; this does not happen automatically.  Go to \nPreferences->Package Settings->TabsExtra\n and Install/Upgrade either the \nbasic\n tab menu or the \noverride\n menu. The \nbasic\n menu's commands won't be grouped together with the built-in options because of the way Sublime Text's menus are managed.  But the \noverride\n menu overrides the \nDefault\n Package's tab context menu for sane, clean grouping of the commands.\n\n\nWhich Commands does TabsExtra Override and Why?\n\ue157\n\n\nTabsExtra overrides all close commands that it can.  The only one it does not override is when the close button on a tab is clicked as that seems to side step the override API and cannot be intercepted.\n\n\nTabsExtra intercepts the close commands in order to provide enhanced close options. Here are all the intercepted commands:\n\n\n\n\nclose_file\n: Close called with a specific window and view id.\n\n\nclose_by_index\n: Close view from tab.\n\n\nclose\n: Close active view from global menu.\n\n\nclose_all\n: Close all tabs in all groups.\n\n\nclose_others_by_index\n: Close other tabs in current group.\n\n\nclose_to_right_by_index\n Close tabs to right in current group.\n\n\n\n\nThis allows TabsExtra do special things like ignore certain tabs, focus a specific tab after closing tab(s), force close without prompting the user if they want to save for every unsaved tab, or even skip unsaved tabs when closing.\n\n\nTabsExtra \ncannot\n override the tab close button.  But it should be able to predict when it is pressed, and focus the appropriate window after the close.\n\n\nNew Close Options\n\ue157\n\n\nTabsExtra expands how many close options there are in the tab context menu.  It also makes them available in the quick panel as well.\n\n\n\n\nClose.\n\n\nClose other tabs.\n\n\nClose tabs to left.\n\n\nClose tabs to right.\n\n\nClose all tabs.\n\n\n\n\nAnd TabsExtra also provides variants that will force close unsaved tabs without annoying the user with a prompt for every unsaved tab.  It also provides variants to simply skip unsaved tabs.\n\n\nSticky Tabs\n\ue157\n\n\nTabsExtra allows users to mark a tab \nsticky\n.  This allows the tab to not close when a \nclose\n operation is performed.  By default, after any \nclose\n command is run, the \nsticky\n tab properties are forgotten.  You can make a tab's stickiness persist by enabling \npersistent_sticky\n.\n\n\n\n\nWarning\n\n\nTabsExtra overrides all close commands except when the user clicks the close button on a tab as this seems to be impossible to override. If this is problematic, you can disable the tab close button by disabling \nshow_tab_close_buttons\n in your \nPreferences.sublime-settings\n file to prevent accidental clicking.\n\n\n\n\n    \n// By default TabsExtra forgets a tab's \"stickiness\" when\n\n    \n// any \"tab close\" command is issued.  You can make the tab's\n\n    \n// \"Stickiness\" persist by enabling the following feature.\n\n    \n\"persistent_sticky\"\n:\n \nfalse\n,\n\n\n\n\n\nA tab's stickiness can be controlled either the context menu or the quick panel.\n\n\nTab Focus After Close\n\ue157\n\n\nBy default TabsExtra keeps the current active tab focused, but if the active tab gets deleted, TabsExtra will default to either the left, right, or last active tab (depending how the user has it set).\n\n\n    \n// If active window gets closed, default to (left|right|last_active)\n\n    \n\"fallback_focus\"\n:\n \n\"right\"\n\n\n\n\n\nTab Spawn Position\n\ue157\n\n\nTabsExtra can control where a new window is opened with the \nspawn_view\n settings option.\n\n\n    \n// Experimental: When opening a view, where should it be spawned at (none|left|active_left|active_right|right)\n\n    \n\"spawn_view\"\n:\n \n\"none\"\n,\n\n\n\n\n\nTab Sort\n\ue157\n\n\nTabsExtra adds various sort options to the tab context menu and quick panel.\n\n\n\n\nSort by name.\n\n\nSort by path.\n\n\nSort by modified.\n\n\nSort by created.\n\n\nSort by file extension.\n\n\nSort by size.\n\n\nSort by last activated.\n\n\nSort by syntax.\n\n\nSort current order in reverse.\n\n\n\n\nYou can control how numbers are handled in strings by enabling \nnumeric_sort\n.  Numbers in strings are sorted alphabetically by default, but you can cause the strings to be sorted numerically if needed.\n\n\n    \n// When sorting, normal strings will be sorted numerically.\n\n    \n//\n\n    \n// Example (non-numerical sort):\n\n    \n//   test12 test2 test1 => test1 test12 test2\n\n    \n//\n\n    \n// Example (numerical sort):\n\n    \n//   test12 test2 test1 => test1 test2 test12\n\n    \n\"numeric_sort\"\n:\n \nfalse\n,\n\n\n\n\n\nYou can also sort tabs on every file open and save by enabling \nsort_on_load_save\n and specifying your desired sort plugin.\n\n\n    \n// Sort tabs when a file is opened or saved\n\n    \n\"sort_on_load_save\"\n:\n \nfalse\n,\n\n\n\n\n\n    \n// Sort module to use when sorting on load and save\n\n    \n//    \"module\": plugin that defines what view meta data is used to sort\n\n    \n//    \"reverse\": (optional) sort tabs in the reverse (true|false)\n\n    \n\"sort_on_load_save_command\"\n:\n \n{\n\"module\"\n:\n \n\"TabsExtra.sort.name\"\n}\n\n\n\n\n\nCustomizing Sort Options\n\ue157\n\n\nYou can control which sort options appear by adding or removing entries from the \nsort_layout\n.  You can also change their orders as \nsort_layout\n is a list that preserves order.  Each entry contains three keys:\n\n\n\n\n\n\n\n\nKey\n\n\nRequired\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmodule\n\n\nYes\n\n\nPath to sort module that is relative to Packages.  It is done in a python import style where \n.\n is used instead of \n/\n; also the \n.py\n extension is omitted.\n\n\n\n\n\n\ncaption\n\n\nYes\n\n\nCaption gives the name that should be displayed in menus or the quick panel for the sort method.\n\n\n\n\n\n\nreverse\n\n\nNo\n\n\nCauses the sort to be returned in reverse order.\n\n\n\n\n\n\n\n\n    \n// Define sort layout.  Each entry contains:\n\n    \n//    \"module\": plugin that defines what view meta data is used to sort\n\n    \n//    \"caption\": menu name for entry\n\n    \n//    \"reverse\": (optional) sort tabs in the reverse (true|false)\n\n    \n\"sort_layout\"\n:\n \n[\n\n        \n{\n\"module\"\n:\n \n\"TabsExtra.sort.name\"\n,\n \n\"caption\"\n:\n \n\"Name\"\n},\n\n        \n{\n\"module\"\n:\n \n\"TabsExtra.sort.path\"\n,\n \n\"caption\"\n:\n \n\"Path\"\n},\n\n        \n{\n\"module\"\n:\n \n\"TabsExtra.sort.modified\"\n,\n \n\"caption\"\n:\n \n\"Modified\"\n},\n\n        \n{\n\"module\"\n:\n \n\"TabsExtra.sort.created\"\n,\n \n\"caption\"\n:\n \n\"Created\"\n},\n\n        \n{\n\"module\"\n:\n \n\"TabsExtra.sort.type\"\n,\n \n\"caption\"\n:\n \n\"Extension\"\n},\n\n        \n{\n\"module\"\n:\n \n\"TabsExtra.sort.size\"\n,\n \n\"caption\"\n:\n \n\"Size\"\n},\n\n        \n{\n\"module\"\n:\n \n\"TabsExtra.sort.activated\"\n,\n \n\"caption\"\n:\n \n\"Last Activated\"\n},\n\n        \n{\n\"module\"\n:\n \n\"TabsExtra.sort.syntax\"\n,\n \n\"caption\"\n:\n \n\"Syntax\"\n},\n\n        \n{\n\"module\"\n:\n \n\"TabsExtra.sort.reverse\"\n,\n \n\"caption\"\n:\n \n\"Reverse Order\"\n}\n\n    \n],\n\n\n\n\n\nIf these modules do not suit your needs, you can write your own.\n\n\nWithin a sort module, there must be a run method as shown below:\n\n\n\n\ndef\n \nrun\n(\nviews\n,\n \nview_data\n)\n\n\n\n\nThis function takes a list of \nviews\n and an empty list to append sort data to.  The \nview_data\n is populated by the \nrun\n function with arrays of formatted info that will be used to sort the tabs.  Info with the most importance should be appended first.\n\n\nIf you are dealing with strings that have numbers, and you wish to sort them numerically, you can import the numeric helper with the following import: \nfrom\n \nTabsExtra\n \nimport\n \ntab_sort_helper\n \nas\n \ntsh\n.  Once imported you can simply run your data through \ntab_sort_helper\n: \ntsh\n.\nnumeric_sort\n(\ndirname\n(\nv\n.\nfile_name\n()\n \nif\n \nv\n.\nfile_name\n()\n \nelse\n \n''\n)\n.\n\n\nParameters\n:\n\n\n\n\n\n\n\n\nParameter\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nviews\n\n\nList of Sublime view objects.\n\n\n\n\n\n\nview_data\n\n\nAn empty list that should be populated by the function with relevant sort data.\n\n\n\n\n\n\n\n\nExample\n:\n\n\nfrom\n \nos.path\n \nimport\n \ndirname\n,\n \nbasename\n\n\nfrom\n \nTabsExtra\n \nimport\n \ntab_sort_helper\n \nas\n \ntsh\n\n\n\n\ndef\n \nrun\n(\nviews\n,\n \nview_data\n):\n\n    \nfor\n \nv\n \nin\n \nviews\n:\n\n        \nview_data\n.\nappend\n(\n\n            \n(\n\n                \ntsh\n.\nnumeric_sort\n(\ndirname\n(\nv\n.\nfile_name\n()\n \nif\n \nv\n.\nfile_name\n()\n \nelse\n \n''\n)\n.\nlower\n()),\n\n                \ntsh\n.\nnumeric_sort\n(\nbasename\n(\nv\n.\nfile_name\n()\n \nif\n \nv\n.\nfile_name\n()\n \nelse\n \n''\n)\n.\nlower\n()),\n\n                \nv\n\n            \n)\n\n        \n)\n\n\n\n\n\n\n\n\n\nAdditional Menu Helper Commands\n\ue157\n\n\nTabsExtra also adds a number of other miscellaneous useful commands in the tab context menu.  Many of which are already available in the quick panel.  You can control which ones show up in menu by configuring \nmenu_layout\n in the settings file; you can even control the order.\n\n\n    \n// Menu layout include or exclude, in whatever order you desire, the following options:\n\n    \n// [\"close\", \"sticky\", \"open\", \"clone\", \"save\", \"delete\", \"rename\", \"reveal\", \"path\", \"revert\", \"sort\"]\n\n    \n// When done, go to Preferences->Package Settings->TabsExtra and Install/Upgrade either\n\n    \n// the default TabsMenu or the Override Menu which overrides the \"Default\" package's menu.\n\n    \n\"menu_layout\"\n:\n \n[\n\"close\"\n,\n \n\"sticky\"\n,\n \n\"open\"\n,\n \n\"clone\"\n,\n \n\"save\"\n,\n \n\"delete\"\n,\n \n\"rename\"\n,\n \n\"reveal\"\n,\n \n\"path\"\n,\n \n\"revert\"\n,\n \n\"sort\"\n],",
            "title": "User Guide"
        },
        {
            "location": "/#user-guide",
            "text": "",
            "title": "User Guide"
        },
        {
            "location": "/#overview",
            "text": "Sublime Plugin with sticky tabs, more tab closing options, tab sorting, and tab access to cloning, deleting, renaming etc.    Adds  Close Tabs to the Left  for the current group.  Adds  Close All Tabs  for the current group.  Adds  Sticky Tabs  that allows a user to select certain tabs that will not close when a tab close command is issued.  Adds variants of the close commands to skip unsaved files, or to dismiss saved files with no prompt.  Overrides the built-in tab commands and 'close' and 'close_all' commands to work with sticky tabs.  Keep active window focus on delete, or default to the last active, left, or right tab (user configurable).  Add open last tab, reveal in sidebar or finder, copy file path, save options, and revert.  Adds tab sorting options (based loosely on @bizoo's  SortTabs  plugin).  Access clone, delete, rename, move, save, reveal, copy file path, revert, etc.",
            "title": "Overview"
        },
        {
            "location": "/#general-usage",
            "text": "Using TabsExtra is very straight forward once the menu is created.  TabsExtra will update the right click context menu of tabs with various useful features.  It also overrides a couple of Sublime's commands to allow for various improvements in relation to tab closing, tab focus when closing files, and tab position when opening files.",
            "title": "General Usage"
        },
        {
            "location": "/#installupgrade-menu",
            "text": "When first installing TabsExtra, you need to Install the new menu; this does not happen automatically.  Go to  Preferences->Package Settings->TabsExtra  and Install/Upgrade either the  basic  tab menu or the  override  menu. The  basic  menu's commands won't be grouped together with the built-in options because of the way Sublime Text's menus are managed.  But the  override  menu overrides the  Default  Package's tab context menu for sane, clean grouping of the commands.",
            "title": "Install/Upgrade Menu"
        },
        {
            "location": "/#which-commands-does-tabsextra-override-and-why",
            "text": "TabsExtra overrides all close commands that it can.  The only one it does not override is when the close button on a tab is clicked as that seems to side step the override API and cannot be intercepted.  TabsExtra intercepts the close commands in order to provide enhanced close options. Here are all the intercepted commands:   close_file : Close called with a specific window and view id.  close_by_index : Close view from tab.  close : Close active view from global menu.  close_all : Close all tabs in all groups.  close_others_by_index : Close other tabs in current group.  close_to_right_by_index  Close tabs to right in current group.   This allows TabsExtra do special things like ignore certain tabs, focus a specific tab after closing tab(s), force close without prompting the user if they want to save for every unsaved tab, or even skip unsaved tabs when closing.  TabsExtra  cannot  override the tab close button.  But it should be able to predict when it is pressed, and focus the appropriate window after the close.",
            "title": "Which Commands does TabsExtra Override and Why?"
        },
        {
            "location": "/#new-close-options",
            "text": "TabsExtra expands how many close options there are in the tab context menu.  It also makes them available in the quick panel as well.   Close.  Close other tabs.  Close tabs to left.  Close tabs to right.  Close all tabs.   And TabsExtra also provides variants that will force close unsaved tabs without annoying the user with a prompt for every unsaved tab.  It also provides variants to simply skip unsaved tabs.",
            "title": "New Close Options"
        },
        {
            "location": "/#sticky-tabs",
            "text": "TabsExtra allows users to mark a tab  sticky .  This allows the tab to not close when a  close  operation is performed.  By default, after any  close  command is run, the  sticky  tab properties are forgotten.  You can make a tab's stickiness persist by enabling  persistent_sticky .   Warning  TabsExtra overrides all close commands except when the user clicks the close button on a tab as this seems to be impossible to override. If this is problematic, you can disable the tab close button by disabling  show_tab_close_buttons  in your  Preferences.sublime-settings  file to prevent accidental clicking.        // By default TabsExtra forgets a tab's \"stickiness\" when \n     // any \"tab close\" command is issued.  You can make the tab's \n     // \"Stickiness\" persist by enabling the following feature. \n     \"persistent_sticky\" :   false ,   A tab's stickiness can be controlled either the context menu or the quick panel.",
            "title": "Sticky Tabs"
        },
        {
            "location": "/#tab-focus-after-close",
            "text": "By default TabsExtra keeps the current active tab focused, but if the active tab gets deleted, TabsExtra will default to either the left, right, or last active tab (depending how the user has it set).       // If active window gets closed, default to (left|right|last_active) \n     \"fallback_focus\" :   \"right\"",
            "title": "Tab Focus After Close"
        },
        {
            "location": "/#tab-spawn-position",
            "text": "TabsExtra can control where a new window is opened with the  spawn_view  settings option.       // Experimental: When opening a view, where should it be spawned at (none|left|active_left|active_right|right) \n     \"spawn_view\" :   \"none\" ,",
            "title": "Tab Spawn Position"
        },
        {
            "location": "/#tab-sort",
            "text": "TabsExtra adds various sort options to the tab context menu and quick panel.   Sort by name.  Sort by path.  Sort by modified.  Sort by created.  Sort by file extension.  Sort by size.  Sort by last activated.  Sort by syntax.  Sort current order in reverse.   You can control how numbers are handled in strings by enabling  numeric_sort .  Numbers in strings are sorted alphabetically by default, but you can cause the strings to be sorted numerically if needed.       // When sorting, normal strings will be sorted numerically. \n     // \n     // Example (non-numerical sort): \n     //   test12 test2 test1 => test1 test12 test2 \n     // \n     // Example (numerical sort): \n     //   test12 test2 test1 => test1 test2 test12 \n     \"numeric_sort\" :   false ,   You can also sort tabs on every file open and save by enabling  sort_on_load_save  and specifying your desired sort plugin.       // Sort tabs when a file is opened or saved \n     \"sort_on_load_save\" :   false ,        // Sort module to use when sorting on load and save \n     //    \"module\": plugin that defines what view meta data is used to sort \n     //    \"reverse\": (optional) sort tabs in the reverse (true|false) \n     \"sort_on_load_save_command\" :   { \"module\" :   \"TabsExtra.sort.name\" }",
            "title": "Tab Sort"
        },
        {
            "location": "/#customizing-sort-options",
            "text": "You can control which sort options appear by adding or removing entries from the  sort_layout .  You can also change their orders as  sort_layout  is a list that preserves order.  Each entry contains three keys:     Key  Required  Description      module  Yes  Path to sort module that is relative to Packages.  It is done in a python import style where  .  is used instead of  / ; also the  .py  extension is omitted.    caption  Yes  Caption gives the name that should be displayed in menus or the quick panel for the sort method.    reverse  No  Causes the sort to be returned in reverse order.          // Define sort layout.  Each entry contains: \n     //    \"module\": plugin that defines what view meta data is used to sort \n     //    \"caption\": menu name for entry \n     //    \"reverse\": (optional) sort tabs in the reverse (true|false) \n     \"sort_layout\" :   [ \n         { \"module\" :   \"TabsExtra.sort.name\" ,   \"caption\" :   \"Name\" }, \n         { \"module\" :   \"TabsExtra.sort.path\" ,   \"caption\" :   \"Path\" }, \n         { \"module\" :   \"TabsExtra.sort.modified\" ,   \"caption\" :   \"Modified\" }, \n         { \"module\" :   \"TabsExtra.sort.created\" ,   \"caption\" :   \"Created\" }, \n         { \"module\" :   \"TabsExtra.sort.type\" ,   \"caption\" :   \"Extension\" }, \n         { \"module\" :   \"TabsExtra.sort.size\" ,   \"caption\" :   \"Size\" }, \n         { \"module\" :   \"TabsExtra.sort.activated\" ,   \"caption\" :   \"Last Activated\" }, \n         { \"module\" :   \"TabsExtra.sort.syntax\" ,   \"caption\" :   \"Syntax\" }, \n         { \"module\" :   \"TabsExtra.sort.reverse\" ,   \"caption\" :   \"Reverse Order\" } \n     ],   If these modules do not suit your needs, you can write your own.  Within a sort module, there must be a run method as shown below:   def   run ( views ,   view_data )   This function takes a list of  views  and an empty list to append sort data to.  The  view_data  is populated by the  run  function with arrays of formatted info that will be used to sort the tabs.  Info with the most importance should be appended first.  If you are dealing with strings that have numbers, and you wish to sort them numerically, you can import the numeric helper with the following import:  from   TabsExtra   import   tab_sort_helper   as   tsh .  Once imported you can simply run your data through  tab_sort_helper :  tsh . numeric_sort ( dirname ( v . file_name ()   if   v . file_name ()   else   '' ) .  Parameters :     Parameter  Description      views  List of Sublime view objects.    view_data  An empty list that should be populated by the function with relevant sort data.     Example :  from   os.path   import   dirname ,   basename  from   TabsExtra   import   tab_sort_helper   as   tsh  def   run ( views ,   view_data ): \n     for   v   in   views : \n         view_data . append ( \n             ( \n                 tsh . numeric_sort ( dirname ( v . file_name ()   if   v . file_name ()   else   '' ) . lower ()), \n                 tsh . numeric_sort ( basename ( v . file_name ()   if   v . file_name ()   else   '' ) . lower ()), \n                 v \n             ) \n         )",
            "title": "Customizing Sort Options"
        },
        {
            "location": "/#additional-menu-helper-commands",
            "text": "TabsExtra also adds a number of other miscellaneous useful commands in the tab context menu.  Many of which are already available in the quick panel.  You can control which ones show up in menu by configuring  menu_layout  in the settings file; you can even control the order.       // Menu layout include or exclude, in whatever order you desire, the following options: \n     // [\"close\", \"sticky\", \"open\", \"clone\", \"save\", \"delete\", \"rename\", \"reveal\", \"path\", \"revert\", \"sort\"] \n     // When done, go to Preferences->Package Settings->TabsExtra and Install/Upgrade either \n     // the default TabsMenu or the Override Menu which overrides the \"Default\" package's menu. \n     \"menu_layout\" :   [ \"close\" ,   \"sticky\" ,   \"open\" ,   \"clone\" ,   \"save\" ,   \"delete\" ,   \"rename\" ,   \"reveal\" ,   \"path\" ,   \"revert\" ,   \"sort\" ],",
            "title": "Additional Menu Helper Commands"
        },
        {
            "location": "/contributing/",
            "text": "Contributing & Support\n\ue157\n\n\nOverview\n\ue157\n\n\n\n\n\n\n\n\nSublime Versions\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nST3\n\n\nFully supported and actively maintained.\n\n\n\n\n\n\n\n\nContribution from the community is encouraged and can be done in a variety of ways:\n\n\n\n\nBug reports.\n\n\nReviewing code.\n\n\nCode patches via pull requests.\n\n\nDocumentation improvements via pull requests.\n\n\n\n\nBug Reports\n\ue157\n\n\n\n\n\n\nPlease \nread the documentation\n and \nsearch the issue tracker\n to try to find the answer to your question \nbefore\n posting an issue.\n\n\n\n\n\n\nWhen creating an issue on the repository, please provide as much info as possible:\n\n\n\n\nProvide environment information by running \nPreferences->Package Settings->TabsExtra->Support Info\n.  The information will be copied to the clipboard; paste the info in issue.\n\n\nErrors in console.\n\n\nDetailed description of the problem.\n\n\nExamples for reproducing the error.  You can post pictures, but if specific text or code is required to reproduce the issue, please provide the text in a plain text format as well for easy copy/paste.\n\n\n\n\nThe more info provided the greater the chance someone will take the time to answer, implement, or fix the issue.\n\n\n\n\n\n\nBe prepared to answer questions and provide additional information if required.  Issues in which the creator refuses to respond to follow up questions will be marked as stale and closed.\n\n\n\n\n\n\nReviewing Code\n\ue157\n\n\nTake part in reviewing pull requests and/or reviewing direct commits.  Make suggestions to improve the code and discuss solutions to overcome weakness in the algorithm.\n\n\nPull Requests\n\ue157\n\n\nPull requests are welcome, and if you plan on contributing directly to the code, there are a couple of things to be mindful of.\n\n\n\n\n\n\nPlease describe the change in as much detail as possible so I can understand what is being added or modified.\n\n\n\n\n\n\nIf you are solving a bug that does not already have an issue, please describe the bug in detail and provide info on how to reproduce if applicable (this is good for me and others to reference later when verifying the issue has been resolved).\n\n\n\n\n\n\nPlease reference and link related open bugs or feature requests in this pull if applicable.\n\n\n\n\n\n\nMake sure you've documented or updated the existing documentation if introducing a new feature or modifying the behavior of an existing feature that a user needs to be aware of.  I will not accept new features or changes to existing features if you have not provided documentation describing the feature.\n\n\n\n\n\n\nContinuous integration tests on are run on all pull requests and commits via Travis CI.  When making a pull request, the tests will automatically be run, and the request must pass to be accepted.  You can (and should) run these tests before pull requesting.  If it is not possible to run these tests locally, they will be run when the pull request is made, but it is strongly suggested that requesters make an effort to verify before requesting to allow for a quick, smooth merge.\n\n\nRunning Validation Tests\n\ue157\n\n\n\n\nTip\n\n\nIf you are running Sublime on a macOS or Linux/Unix system, you run all tests by by running the shell script (assuming you have installed your environment fulfills all requirements below):\n\n\nchmod +x run_tests.sh\n./run_tests.sh\n\n\n\n\n\n\nThere are a couple of dependencies that must be present before running the tests.\n\n\n\n\n\n\nAs \nST3\n is the only current, actively supported version, Python 3.3 must be used to validate the tests.\n\n\n\n\n\n\nUnit tests are run with \npytest\n.  You can install \npytest\n via:\n\n\npip install pytest\n\n\n\n\nThe tests should be run from the root folder of the plugin by using the following command:\n\n\npy.test .\n\n\n\n\n\n\n\n\nLinting is performed on the entire project with \nflake8\n, \nflake8_docstrings\n, \npep8-naming\n.  These can be installed via:\n\n\npip install flake8\npip install flake8_docstrings\npip install pep8-naming\n\n\n\n\nLinting is performed with the following command:\n\n\nflake8 .\n\n\n\n\n\n\n\n\nDocumentation Improvements\n\ue157\n\n\nA ton of time has been spent not only creating and supporting this plugin, but also spent making this documentation.  If you feel it is still lacking, show your appreciation for the plugin by helping to improve the documentation.  Help with documentation is always appreciated and can be done via pull requests.  There shouldn't be any need to run validation tests if only updating documentation.\n\n\nYou don't have to render the docs locally before pull requesting, but if you wish to, I currently use a combination of \nMkDocs\n, the \nMaterial theme\n, and \nPyMdown Extensions\n to render the docs.  You can preview the docs if you install these two packages.  The command for previewing the docs is \nmkdocs serve\n from the root directory. You can then view the documents at \nlocalhost:8000\n.",
            "title": "Contributing &amp; Support"
        },
        {
            "location": "/contributing/#contributing--support",
            "text": "",
            "title": "Contributing &amp; Support"
        },
        {
            "location": "/contributing/#overview",
            "text": "Sublime Versions  Description      ST3  Fully supported and actively maintained.     Contribution from the community is encouraged and can be done in a variety of ways:   Bug reports.  Reviewing code.  Code patches via pull requests.  Documentation improvements via pull requests.",
            "title": "Overview"
        },
        {
            "location": "/contributing/#bug-reports",
            "text": "Please  read the documentation  and  search the issue tracker  to try to find the answer to your question  before  posting an issue.    When creating an issue on the repository, please provide as much info as possible:   Provide environment information by running  Preferences->Package Settings->TabsExtra->Support Info .  The information will be copied to the clipboard; paste the info in issue.  Errors in console.  Detailed description of the problem.  Examples for reproducing the error.  You can post pictures, but if specific text or code is required to reproduce the issue, please provide the text in a plain text format as well for easy copy/paste.   The more info provided the greater the chance someone will take the time to answer, implement, or fix the issue.    Be prepared to answer questions and provide additional information if required.  Issues in which the creator refuses to respond to follow up questions will be marked as stale and closed.",
            "title": "Bug Reports"
        },
        {
            "location": "/contributing/#reviewing-code",
            "text": "Take part in reviewing pull requests and/or reviewing direct commits.  Make suggestions to improve the code and discuss solutions to overcome weakness in the algorithm.",
            "title": "Reviewing Code"
        },
        {
            "location": "/contributing/#pull-requests",
            "text": "Pull requests are welcome, and if you plan on contributing directly to the code, there are a couple of things to be mindful of.    Please describe the change in as much detail as possible so I can understand what is being added or modified.    If you are solving a bug that does not already have an issue, please describe the bug in detail and provide info on how to reproduce if applicable (this is good for me and others to reference later when verifying the issue has been resolved).    Please reference and link related open bugs or feature requests in this pull if applicable.    Make sure you've documented or updated the existing documentation if introducing a new feature or modifying the behavior of an existing feature that a user needs to be aware of.  I will not accept new features or changes to existing features if you have not provided documentation describing the feature.    Continuous integration tests on are run on all pull requests and commits via Travis CI.  When making a pull request, the tests will automatically be run, and the request must pass to be accepted.  You can (and should) run these tests before pull requesting.  If it is not possible to run these tests locally, they will be run when the pull request is made, but it is strongly suggested that requesters make an effort to verify before requesting to allow for a quick, smooth merge.",
            "title": "Pull Requests"
        },
        {
            "location": "/contributing/#running-validation-tests",
            "text": "Tip  If you are running Sublime on a macOS or Linux/Unix system, you run all tests by by running the shell script (assuming you have installed your environment fulfills all requirements below):  chmod +x run_tests.sh\n./run_tests.sh   There are a couple of dependencies that must be present before running the tests.    As  ST3  is the only current, actively supported version, Python 3.3 must be used to validate the tests.    Unit tests are run with  pytest .  You can install  pytest  via:  pip install pytest  The tests should be run from the root folder of the plugin by using the following command:  py.test .    Linting is performed on the entire project with  flake8 ,  flake8_docstrings ,  pep8-naming .  These can be installed via:  pip install flake8\npip install flake8_docstrings\npip install pep8-naming  Linting is performed with the following command:  flake8 .",
            "title": "Running Validation Tests"
        },
        {
            "location": "/contributing/#documentation-improvements",
            "text": "A ton of time has been spent not only creating and supporting this plugin, but also spent making this documentation.  If you feel it is still lacking, show your appreciation for the plugin by helping to improve the documentation.  Help with documentation is always appreciated and can be done via pull requests.  There shouldn't be any need to run validation tests if only updating documentation.  You don't have to render the docs locally before pull requesting, but if you wish to, I currently use a combination of  MkDocs , the  Material theme , and  PyMdown Extensions  to render the docs.  You can preview the docs if you install these two packages.  The command for previewing the docs is  mkdocs serve  from the root directory. You can then view the documents at  localhost:8000 .",
            "title": "Documentation Improvements"
        },
        {
            "location": "/license/",
            "text": "License\n\ue157\n\n\nTabsExtra is released under the MIT license.\n\n\nCopyright \u00a9 2014 - 2017 Isaac Muse \nisaacmuse@gmail.com\n\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.",
            "title": "License"
        },
        {
            "location": "/license/#license",
            "text": "TabsExtra is released under the MIT license.  Copyright \u00a9 2014 - 2017 Isaac Muse  isaacmuse@gmail.com  Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:  The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.",
            "title": "License"
        }
    ]
}